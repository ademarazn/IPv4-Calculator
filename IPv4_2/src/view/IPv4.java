/*
 * Projeto para matéria de Redes - FATEC Ourinhos
 */
package view;

import javax.swing.JOptionPane;

/**
 * Classe para fazer calculos IPv4, encontrar endereço de rede,
 * endereço de broadcast, endereço inicial de host e endereço final de host.
 * @author Ademar Zório Neto
 * @since Classe criada em 27/02/2017
 */
public class IPv4 extends javax.swing.JFrame {

    String[] ip, mascara;
    int[] mascaraDez=new int[4], redeDez=new int[4],
            broadcastDez=new int[4], endInicialDez=new int[4],
            endFinalDez=new int[4];
    String[] ipBin=new String[4], mascaraBin=new String[4],
            mascaraBinInv=new String[4], redeBin=new String[4],
            broadcastBin=new String[4];
    
    /**
     * Creates new form Tela
     */
    public IPv4() {
        initComponents();
        //txtIP.setFocusLostBehavior(JFormattedTextField.COMMIT);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblIP = new javax.swing.JLabel();
        lblRede = new javax.swing.JLabel();
        lblBroadcast = new javax.swing.JLabel();
        lblInicial = new javax.swing.JLabel();
        lblFinal = new javax.swing.JLabel();
        btCalcular = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        txtIpMasc = new javax.swing.JTextField();
        txtRede = new javax.swing.JTextField();
        txtBroadcast = new javax.swing.JTextField();
        txtInicial = new javax.swing.JTextField();
        txtFinal = new javax.swing.JTextField();
        btLimpar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cálculo de IPv4 - Ademar Zório Neto");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setBackground(new java.awt.Color(60, 120, 240));
        jLabel1.setFont(new java.awt.Font("Monospaced", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("IPv4");
        jLabel1.setOpaque(true);

        lblIP.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        lblIP.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblIP.setText("Endereço IP/Máscara de subrede");

        lblRede.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        lblRede.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblRede.setText("Endereço de rede");

        lblBroadcast.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        lblBroadcast.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblBroadcast.setText("Endereço de broadcast");

        lblInicial.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        lblInicial.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblInicial.setText("Endereço inicial de host");

        lblFinal.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        lblFinal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblFinal.setText("Endereço final de host");

        btCalcular.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        btCalcular.setText("Calcular");
        btCalcular.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btCalcularMousePressed(evt);
            }
        });

        txtIpMasc.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N

        txtRede.setEditable(false);
        txtRede.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        txtRede.setDisabledTextColor(java.awt.Color.black);
        txtRede.setEnabled(false);

        txtBroadcast.setEditable(false);
        txtBroadcast.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        txtBroadcast.setDisabledTextColor(java.awt.Color.black);
        txtBroadcast.setEnabled(false);

        txtInicial.setEditable(false);
        txtInicial.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        txtInicial.setDisabledTextColor(java.awt.Color.black);
        txtInicial.setEnabled(false);

        txtFinal.setEditable(false);
        txtFinal.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        txtFinal.setDisabledTextColor(java.awt.Color.black);
        txtFinal.setEnabled(false);

        btLimpar.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        btLimpar.setText("Limpar");
        btLimpar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btLimparMousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblRede, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblIP, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBroadcast, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtInicial, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                            .addComponent(txtBroadcast, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                            .addComponent(btCalcular, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                            .addComponent(txtIpMasc, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                            .addComponent(txtRede, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                            .addComponent(txtFinal, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE))))
                .addGap(10, 10, 10))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, Short.MAX_VALUE)
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtIpMasc, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblIP, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(btCalcular, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtRede, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRede, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(lblBroadcast, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtBroadcast, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(lblInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(lblFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(btLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btCalcularMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btCalcularMousePressed
        if(!txtIpMasc.getText().isEmpty()) {
            String[] ipMasc;
            String ipMascara = txtIpMasc.getText();
            int qtdBarra = 0, qtdPonto = 0;
            ipMasc = ipMascara.split("\\/");
            ip = ipMasc[0].split("\\.");
            for(int i=0; i<ipMascara.length(); i++) {
                if(ipMascara.charAt(i)=='/') {
                    qtdBarra++;
                }
            }
            if(qtdBarra != 1) {
                JOptionPane.showMessageDialog(null, "Formato \"Endereço IP/"
                        + "Máscara de subrede\" inválido");
                limpar();
                return;
            }
            for(int i=0; i<ipMascara.length(); i++) {
                if(ipMascara.charAt(i)=='.') {
                    qtdPonto++;
                }
            }
            if(qtdPonto != 3) {
                JOptionPane.showMessageDialog(null, "Endereço IP inválido");
                limpar();
                return;
            }
            try {
                Integer.parseInt(ip[0]);
                Integer.parseInt(ip[1]);
                Integer.parseInt(ip[2]);
                Integer.parseInt(ip[3]);
            }catch(NumberFormatException | ArrayIndexOutOfBoundsException e) {
                JOptionPane.showMessageDialog(null, "Endereço IP inválido");
                limpar();
                return;
            }
            if(Integer.parseInt(ip[0])>255 || Integer.parseInt(ip[0])<0 ||
               Integer.parseInt(ip[1])>255 || Integer.parseInt(ip[1])<0 ||
               Integer.parseInt(ip[2])>255 || Integer.parseInt(ip[2])<0 ||
               Integer.parseInt(ip[3])>255 || Integer.parseInt(ip[3])<0) {
                JOptionPane.showMessageDialog(null, "Endereco IP inválido");
                limpar();
                return;
            }
            try {
                Integer.parseInt(ipMasc[1]);
            }catch(NumberFormatException | ArrayIndexOutOfBoundsException e) {
                JOptionPane.showMessageDialog(null, "Máscara de subrede inválida");
                limpar();
                return;
            }
            if(Integer.parseInt(ipMasc[1])>32 || Integer.parseInt(ipMasc[1])<0) {
                JOptionPane.showMessageDialog(null, "Máscara de subrede inválida");
                limpar();
                return;
            }
            encontrarMascara(ipMasc[1]);
            converterDezBin(ip, ipBin);
            encontrarEnderecoRede();
            inverterMascaraBin();
            encontrarEnderecoBroadcast();
            converterBinDez(redeBin, redeDez);
            converterBinDez(broadcastBin, broadcastDez);
            encontrarEnderecoInicial();
            encontrarEnderecoFinal();
            txtRede.setText(redeDez[0]+"."+redeDez[1]+"."+redeDez[2]+"."+redeDez[3]);
            txtBroadcast.setText(broadcastDez[0]+"."+broadcastDez[1]+"."+
                    broadcastDez[2]+"."+broadcastDez[3]);
            if(Integer.parseInt(ipMasc[1])<=30) {
                txtInicial.setText(endInicialDez[0]+"."+endInicialDez[1]+"."+
                        endInicialDez[2]+"."+endInicialDez[3]);
                txtFinal.setText(endFinalDez[0]+"."+endFinalDez[1]+"."+
                        endFinalDez[2]+"."+endFinalDez[3]);
            }else {
                txtInicial.setText(redeDez[0]+"."+redeDez[1]+"."+
                        redeDez[2]+"."+redeDez[3]);
                txtFinal.setText(broadcastDez[0]+"."+broadcastDez[1]+"."+
                        broadcastDez[2]+"."+broadcastDez[3]);                    
            }
        }
    }//GEN-LAST:event_btCalcularMousePressed

    private void btLimparMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btLimparMousePressed
        txtIpMasc.setText(null);
        limpar();
    }//GEN-LAST:event_btLimparMousePressed

    private void limpar() {
        txtRede.setText(null);
        txtBroadcast.setText(null);
        txtInicial.setText(null);
        txtFinal.setText(null);
        txtIpMasc.requestFocus();
    }
    
    private void converterDezBin(String[] dez, String[] bin) {
        for(int i=0; i<4; i++) {
            bin[i] = Integer.toBinaryString(Integer.parseInt(dez[i]));
            int max = 8-bin[i].length();
            for(int j=0; j<max; j++) {
                bin[i] = "0"+bin[i];
            }
        }
        //System.out.println(bin[0]+"."+bin[1]+"."+bin[2]+"."+bin[3]);
    }
    
    private void converterBinDez(String[] bin, int[] dez) {
        for(int i=0; i<4; i++) {
            dez[i] = Integer.parseInt(bin[i],2);
        }
//        System.out.println(dez[0]+"."+dez[1]+"."+dez[2]+"."+dez[3]);
    }
    
    private void encontrarMascara(String mascara) {
        String masc = "";
        int m = Integer.parseInt(mascara);
        for(int i=0; i<m; i++) {
            masc = masc+"1";
        }
        for(int i=0; i<32-m; i++) {
            masc = masc+"0";
        }
        mascaraBin[0] = masc.substring(0, 8);
        mascaraBin[1] = masc.substring(8, 16);
        mascaraBin[2] = masc.substring(16, 24);
        mascaraBin[3] = masc.substring(24, 32);
        converterBinDez(mascaraBin, mascaraDez);
    }
    
    private void encontrarEnderecoRede() {
        redeBin=new String[4];
        for(int i=0; i<4; i++) {
            for(int j=0; j<8; j++) {
                if(ipBin[i].charAt(j)=='1' && mascaraBin[i].charAt(j)=='1') {
                    if(redeBin[i]==null) {
                        redeBin[i] = "1";
                    }else {
                        redeBin[i] = redeBin[i]+'1';                        
                    }
                }else {
                    if(redeBin[i]==null) {
                        redeBin[i] = "0";
                    }else {
                        redeBin[i] = redeBin[i]+'0';                        
                    }
                }
            }
        }
        /*System.out.println(redeBin[0]+"."+redeBin[1]+"."+redeBin[2]+"."+
                redeBin[3]+" - Rede");
        */
    }
    
    private void inverterMascaraBin() {
        mascaraBinInv=new String[4];
        for(int i=0; i<4; i++) {
            for(int j=0; j<8; j++) {
                if(mascaraBin[i].charAt(j)=='1') {
                    if(mascaraBinInv[i]==null) {
                        mascaraBinInv[i] = "0";
                    }else {
                        mascaraBinInv[i] = mascaraBinInv[i]+'0';                        
                    }
                }else {
                    if(mascaraBinInv[i]==null) {
                        mascaraBinInv[i] = "1";
                    }else {
                        mascaraBinInv[i] = mascaraBinInv[i]+'1';                        
                    }
                }
            }
        }
        /*System.out.println(mascaraBinInv[0]+"."+mascaraBinInv[1]+"."+
                mascaraBinInv[2]+"."+mascaraBinInv[3]+" - Máscara Inversa");
        */
    }
    
    private void encontrarEnderecoBroadcast() {
        broadcastBin=new String[4];
        for(int i=0; i<4; i++) {
            for(int j=0; j<8; j++) {
                if(ipBin[i].charAt(j)=='1' || mascaraBinInv[i].charAt(j)=='1') {
                    if(broadcastBin[i]==null) {
                        broadcastBin[i] = "1";
                    }else {
                        broadcastBin[i] = broadcastBin[i]+'1';                        
                    }
                }else {
                    if(broadcastBin[i]==null) {
                        broadcastBin[i] = "0";
                    }else {
                        broadcastBin[i] = broadcastBin[i]+'0';                        
                    }
                }
            }
        }
        /*System.out.println(broadcastBin[0]+"."+broadcastBin[1]+"."+
                broadcastBin[2]+"."+broadcastBin[3]+" - Broadcast");
        */
    }
    
    private void encontrarEnderecoInicial() {
        endInicialDez=new int[4];
        for(int i=0; i<4; i++) {
            endInicialDez[i] = redeDez[i];
            if(redeDez[3]<255 && i==3) {
                endInicialDez[3] = redeDez[3]+1;
            }else if(redeDez[2]<255 && i==3) {
                endInicialDez[2] = redeDez[2]+1;
                endInicialDez[3] = 0;
            }else if(redeDez[1]<255 && i==3) {
                endInicialDez[1] = redeDez[1]+1;
                endInicialDez[2] = 0;
                endInicialDez[3] = 0;
            }else if(redeDez[0]<255 && i==3) {
                endInicialDez[0] = redeDez[0]+1;
                endInicialDez[1] = 0;
                endInicialDez[2] = 0;
                endInicialDez[3] = 0;
            }
        }
    }
    
    private void encontrarEnderecoFinal() {
        endFinalDez=new int[4];
        for(int i=0; i<4; i++) {
            endFinalDez[i] = broadcastDez[i];
            if(broadcastDez[3]>0 && i==3) {
                endFinalDez[3] = broadcastDez[3]-1;
            }else if(broadcastDez[2]>0 && i==3) {
                endFinalDez[2] = broadcastDez[2]-1;
                endFinalDez[3] = 255;
            }else if(broadcastDez[1]>0 && i==3) {
                endFinalDez[1] = broadcastDez[1]-1;
                endFinalDez[2] = 255;
                endFinalDez[3] = 255;
            }else if(broadcastDez[0]>0 && i==3) {
                endFinalDez[0] = broadcastDez[0]-1;
                endFinalDez[1] = 255;
                endFinalDez[2] = 255;
                endFinalDez[3] = 255;
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IPv4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IPv4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IPv4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IPv4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IPv4().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCalcular;
    private javax.swing.JButton btLimpar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblBroadcast;
    private javax.swing.JLabel lblFinal;
    private javax.swing.JLabel lblIP;
    private javax.swing.JLabel lblInicial;
    private javax.swing.JLabel lblRede;
    private javax.swing.JTextField txtBroadcast;
    private javax.swing.JTextField txtFinal;
    private javax.swing.JTextField txtInicial;
    private javax.swing.JTextField txtIpMasc;
    private javax.swing.JTextField txtRede;
    // End of variables declaration//GEN-END:variables
}
